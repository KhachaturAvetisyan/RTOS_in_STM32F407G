
task_sckedular.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f88  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08001130  08001130  00011130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001258  08001258  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08001258  08001258  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001258  08001258  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001258  08001258  00011258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800125c  0800125c  0001125c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08001260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000044  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000b8  200000b8  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000ba7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003c4  00000000  00000000  00020c4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001a0  00000000  00000000  00021010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000168  00000000  00000000  000211b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002c5f  00000000  00000000  00021318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000014f6  00000000  00000000  00023f77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000096db  00000000  00000000  0002546d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002eb48  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c08  00000000  00000000  0002eb98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000074 	.word	0x20000074
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001118 	.word	0x08001118

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000078 	.word	0x20000078
 80001e4:	08001118 	.word	0x08001118

080001e8 <main>:
uint32_t psp_of_tasks[MAX_TASKS] = {T1_STACK_START, T2_STACK_START, T3_STACK_START, T4_STACK_START};
uint32_t task_handlers[MAX_TASKS];
uint8_t current_task = 0;

int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	printf("______START______\n");
 80001ec:	480f      	ldr	r0, [pc, #60]	; (800022c <main+0x44>)
 80001ee:	f000 fb03 	bl	80007f8 <puts>

	enable_processor_faults();
 80001f2:	f000 f8cd 	bl	8000390 <enable_processor_faults>

	init_scheduler_stack(SCHED_STACK_START);
 80001f6:	480e      	ldr	r0, [pc, #56]	; (8000230 <main+0x48>)
 80001f8:	f000 f87c 	bl	80002f4 <init_scheduler_stack>

	task_handlers[0] = (uint32_t)task1_handler;
 80001fc:	4a0d      	ldr	r2, [pc, #52]	; (8000234 <main+0x4c>)
 80001fe:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <main+0x50>)
 8000200:	601a      	str	r2, [r3, #0]
	task_handlers[1] = (uint32_t)task2_handler;
 8000202:	4a0e      	ldr	r2, [pc, #56]	; (800023c <main+0x54>)
 8000204:	4b0c      	ldr	r3, [pc, #48]	; (8000238 <main+0x50>)
 8000206:	605a      	str	r2, [r3, #4]
	task_handlers[2] = (uint32_t)task3_handler;
 8000208:	4a0d      	ldr	r2, [pc, #52]	; (8000240 <main+0x58>)
 800020a:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <main+0x50>)
 800020c:	609a      	str	r2, [r3, #8]
	task_handlers[3] = (uint32_t)task4_handler;
 800020e:	4a0d      	ldr	r2, [pc, #52]	; (8000244 <main+0x5c>)
 8000210:	4b09      	ldr	r3, [pc, #36]	; (8000238 <main+0x50>)
 8000212:	60da      	str	r2, [r3, #12]

	init_tasks_stack();
 8000214:	f000 f874 	bl	8000300 <init_tasks_stack>

	init_systick_timer(TICK_HZ);
 8000218:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800021c:	f000 f834 	bl	8000288 <init_systick_timer>

	switch_sp_to_psp();
 8000220:	f000 f914 	bl	800044c <switch_sp_to_psp>

	task1_handler();
 8000224:	f000 f810 	bl	8000248 <task1_handler>

    /* Loop forever */
	for(;;);
 8000228:	e7fe      	b.n	8000228 <main+0x40>
 800022a:	bf00      	nop
 800022c:	08001130 	.word	0x08001130
 8000230:	2001f000 	.word	0x2001f000
 8000234:	08000249 	.word	0x08000249
 8000238:	20000090 	.word	0x20000090
 800023c:	08000259 	.word	0x08000259
 8000240:	08000269 	.word	0x08000269
 8000244:	08000279 	.word	0x08000279

08000248 <task1_handler>:
}

void task1_handler(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is a Task1!!\n");
 800024c:	4801      	ldr	r0, [pc, #4]	; (8000254 <task1_handler+0xc>)
 800024e:	f000 fad3 	bl	80007f8 <puts>
 8000252:	e7fb      	b.n	800024c <task1_handler+0x4>
 8000254:	08001144 	.word	0x08001144

08000258 <task2_handler>:
	}
}

void task2_handler(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is a Task2!!\n");
 800025c:	4801      	ldr	r0, [pc, #4]	; (8000264 <task2_handler+0xc>)
 800025e:	f000 facb 	bl	80007f8 <puts>
 8000262:	e7fb      	b.n	800025c <task2_handler+0x4>
 8000264:	08001158 	.word	0x08001158

08000268 <task3_handler>:
	}
}

void task3_handler(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is a Task3!!\n");
 800026c:	4801      	ldr	r0, [pc, #4]	; (8000274 <task3_handler+0xc>)
 800026e:	f000 fac3 	bl	80007f8 <puts>
 8000272:	e7fb      	b.n	800026c <task3_handler+0x4>
 8000274:	0800116c 	.word	0x0800116c

08000278 <task4_handler>:
	}
}

void task4_handler(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is a Task4!!\n");
 800027c:	4801      	ldr	r0, [pc, #4]	; (8000284 <task4_handler+0xc>)
 800027e:	f000 fabb 	bl	80007f8 <puts>
 8000282:	e7fb      	b.n	800027c <task4_handler+0x4>
 8000284:	08001180 	.word	0x08001180

08000288 <init_systick_timer>:
	}
}

void init_systick_timer(uint32_t tick_hz)
{
 8000288:	b480      	push	{r7}
 800028a:	b087      	sub	sp, #28
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 8000290:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <init_systick_timer+0x60>)
 8000292:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 8000294:	4b15      	ldr	r3, [pc, #84]	; (80002ec <init_systick_timer+0x64>)
 8000296:	613b      	str	r3, [r7, #16]

	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz) - 1;
 8000298:	4a15      	ldr	r2, [pc, #84]	; (80002f0 <init_systick_timer+0x68>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	fbb2 f3f3 	udiv	r3, r2, r3
 80002a0:	3b01      	subs	r3, #1
 80002a2:	60fb      	str	r3, [r7, #12]

	// Clear the value of SVR
	*pSRVR &=  ~(0x00FFFFFFFF);
 80002a4:	697b      	ldr	r3, [r7, #20]
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]

	// Load the value in to SVR
	*pSRVR |= count_value;
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	431a      	orrs	r2, r3
 80002b2:	697b      	ldr	r3, [r7, #20]
 80002b4:	601a      	str	r2, [r3, #0]

	// Do some settings
	*pSCSR |= (1 << 1); // Enables SysTick exception request
 80002b6:	693b      	ldr	r3, [r7, #16]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f043 0202 	orr.w	r2, r3, #2
 80002be:	693b      	ldr	r3, [r7, #16]
 80002c0:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2); // Indicates the clock source, processor clock source
 80002c2:	693b      	ldr	r3, [r7, #16]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f043 0204 	orr.w	r2, r3, #4
 80002ca:	693b      	ldr	r3, [r7, #16]
 80002cc:	601a      	str	r2, [r3, #0]

	// Enable the systick
	*pSCSR |= (1 << 0); // Enables the counter
 80002ce:	693b      	ldr	r3, [r7, #16]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f043 0201 	orr.w	r2, r3, #1
 80002d6:	693b      	ldr	r3, [r7, #16]
 80002d8:	601a      	str	r2, [r3, #0]
}
 80002da:	bf00      	nop
 80002dc:	371c      	adds	r7, #28
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	e000e014 	.word	0xe000e014
 80002ec:	e000e010 	.word	0xe000e010
 80002f0:	00f42400 	.word	0x00f42400

080002f4 <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 80002f4:	4603      	mov	r3, r0
	__asm volatile("MSR MSP, %0" : : "r" (sched_top_of_stack) : );
 80002f6:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 80002fa:	4770      	bx	lr
}
 80002fc:	bf00      	nop
	...

08000300 <init_tasks_stack>:

void init_tasks_stack(void)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
	uint32_t *pPSP;

	for(uint8_t i = 0; i < MAX_TASKS; ++i)
 8000306:	2300      	movs	r3, #0
 8000308:	70fb      	strb	r3, [r7, #3]
 800030a:	e032      	b.n	8000372 <init_tasks_stack+0x72>
	{
		pPSP = (uint32_t*) psp_of_tasks[i];
 800030c:	78fb      	ldrb	r3, [r7, #3]
 800030e:	4a1e      	ldr	r2, [pc, #120]	; (8000388 <init_tasks_stack+0x88>)
 8000310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000314:	607b      	str	r3, [r7, #4]

		pPSP--;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	3b04      	subs	r3, #4
 800031a:	607b      	str	r3, [r7, #4]
		*pPSP = DUMMY_XPSR; // 0x00100000
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000322:	601a      	str	r2, [r3, #0]

		pPSP--; // PC
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	3b04      	subs	r3, #4
 8000328:	607b      	str	r3, [r7, #4]
		*pPSP = task_handlers[i];
 800032a:	78fb      	ldrb	r3, [r7, #3]
 800032c:	4a17      	ldr	r2, [pc, #92]	; (800038c <init_tasks_stack+0x8c>)
 800032e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	601a      	str	r2, [r3, #0]

		pPSP--; // LR
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	3b04      	subs	r3, #4
 800033a:	607b      	str	r3, [r7, #4]
		*pPSP = 0xFFFFFFFD;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	f06f 0202 	mvn.w	r2, #2
 8000342:	601a      	str	r2, [r3, #0]

		for(uint8_t j = 0; j < 13; ++j)
 8000344:	2300      	movs	r3, #0
 8000346:	70bb      	strb	r3, [r7, #2]
 8000348:	e008      	b.n	800035c <init_tasks_stack+0x5c>
		{
			pPSP--;
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	3b04      	subs	r3, #4
 800034e:	607b      	str	r3, [r7, #4]
			*pPSP = 0;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
		for(uint8_t j = 0; j < 13; ++j)
 8000356:	78bb      	ldrb	r3, [r7, #2]
 8000358:	3301      	adds	r3, #1
 800035a:	70bb      	strb	r3, [r7, #2]
 800035c:	78bb      	ldrb	r3, [r7, #2]
 800035e:	2b0c      	cmp	r3, #12
 8000360:	d9f3      	bls.n	800034a <init_tasks_stack+0x4a>
		}

		psp_of_tasks[i] = (uint32_t)pPSP;
 8000362:	78fb      	ldrb	r3, [r7, #3]
 8000364:	687a      	ldr	r2, [r7, #4]
 8000366:	4908      	ldr	r1, [pc, #32]	; (8000388 <init_tasks_stack+0x88>)
 8000368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint8_t i = 0; i < MAX_TASKS; ++i)
 800036c:	78fb      	ldrb	r3, [r7, #3]
 800036e:	3301      	adds	r3, #1
 8000370:	70fb      	strb	r3, [r7, #3]
 8000372:	78fb      	ldrb	r3, [r7, #3]
 8000374:	2b03      	cmp	r3, #3
 8000376:	d9c9      	bls.n	800030c <init_tasks_stack+0xc>

	}
}
 8000378:	bf00      	nop
 800037a:	bf00      	nop
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	20000000 	.word	0x20000000
 800038c:	20000090 	.word	0x20000090

08000390 <enable_processor_faults>:

void enable_processor_faults(void)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 8000396:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <enable_processor_faults+0x3c>)
 8000398:	607b      	str	r3, [r7, #4]

	*pSHCSR |= (1 << 16); // MemManage enable bit
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 17); // BusFault enable bit
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 18); // UsageFault enable
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	601a      	str	r2, [r3, #0]
}
 80003be:	bf00      	nop
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	e000ed24 	.word	0xe000ed24

080003d0 <get_psp_value>:

uint32_t get_psp_value(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
	return psp_of_tasks[current_task];
 80003d4:	4b05      	ldr	r3, [pc, #20]	; (80003ec <get_psp_value+0x1c>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	461a      	mov	r2, r3
 80003da:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <get_psp_value+0x20>)
 80003dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80003e0:	4618      	mov	r0, r3
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	200000a0 	.word	0x200000a0
 80003f0:	20000000 	.word	0x20000000

080003f4 <save_psp_value>:

void save_psp_value(uint32_t current_psp_value)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	psp_of_tasks[current_task] = current_psp_value;
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <save_psp_value+0x24>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	4619      	mov	r1, r3
 8000402:	4a06      	ldr	r2, [pc, #24]	; (800041c <save_psp_value+0x28>)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 800040a:	bf00      	nop
 800040c:	370c      	adds	r7, #12
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	200000a0 	.word	0x200000a0
 800041c:	20000000 	.word	0x20000000

08000420 <update_next_task>:

void update_next_task(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
	++current_task;
 8000424:	4b08      	ldr	r3, [pc, #32]	; (8000448 <update_next_task+0x28>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	3301      	adds	r3, #1
 800042a:	b2da      	uxtb	r2, r3
 800042c:	4b06      	ldr	r3, [pc, #24]	; (8000448 <update_next_task+0x28>)
 800042e:	701a      	strb	r2, [r3, #0]
	current_task %= MAX_TASKS;
 8000430:	4b05      	ldr	r3, [pc, #20]	; (8000448 <update_next_task+0x28>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	f003 0303 	and.w	r3, r3, #3
 8000438:	b2da      	uxtb	r2, r3
 800043a:	4b03      	ldr	r3, [pc, #12]	; (8000448 <update_next_task+0x28>)
 800043c:	701a      	strb	r2, [r3, #0]
}
 800043e:	bf00      	nop
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr
 8000448:	200000a0 	.word	0x200000a0

0800044c <switch_sp_to_psp>:
__attribute__((naked)) void switch_sp_to_psp(void)
{
	// 1. Initialize the PSP with current task stack start address

	// get the value of PSP of current_task
	__asm volatile("PUSH {LR}"); // preserve LR which connects back to main()
 800044c:	b500      	push	{lr}
	__asm volatile("BL get_psp_value"); // get current task PSP value
 800044e:	f7ff ffbf 	bl	80003d0 <get_psp_value>
	__asm volatile("MSR PSP, R0"); // initialize PSP
 8000452:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}"); // pops back LR value
 8000456:	f85d eb04 	ldr.w	lr, [sp], #4

	// 2. Change SP to PSP using CONTROL register
	__asm volatile("MOV R0, #0x02");
 800045a:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL, R0");
 800045e:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 8000462:	4770      	bx	lr
}
 8000464:	bf00      	nop

08000466 <SysTick_Handler>:
__attribute__((naked)) void SysTick_Handler(void)
{
	/* Save the context of current task */

	// 1. Get current running task's PSP value
	__asm volatile("MRS R0, PSP");
 8000466:	f3ef 8009 	mrs	r0, PSP

	// 2. Using that PSP value store SF2( R4 - R11 )
	__asm volatile("STMDB R0!, {R4-R11}");
 800046a:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile("PUSH {LR}"); // preserve LR which connects back to main()
 800046e:	b500      	push	{lr}

	// 3. Save the current values of PSP
	__asm volatile("BL save_psp_value");
 8000470:	f7ff ffc0 	bl	80003f4 <save_psp_value>


	/* Retrieve the context of next task */

	// 1. Decide next task to run
	__asm volatile("BL update_next_task");
 8000474:	f7ff ffd4 	bl	8000420 <update_next_task>

	// 2. Get its past PSP value
	__asm volatile("BL get_psp_value");
 8000478:	f7ff ffaa 	bl	80003d0 <get_psp_value>

	// 3. Using that PSP value retrieve SF2( R4 - R11 )
	__asm volatile("LDMIA R0!, {R4-R11}");
 800047c:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// 4. Update PSP and exit
	__asm volatile("MSR PSP, R0");
 8000480:	f380 8809 	msr	PSP, r0

	__asm volatile("POP {LR}"); // pops back LR value
 8000484:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("BX LR");
 8000488:	4770      	bx	lr

}
 800048a:	bf00      	nop

0800048c <HardFault_Handler>:

void HardFault_Handler(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
	printf("Exception : HardFault!\n");
 8000490:	4801      	ldr	r0, [pc, #4]	; (8000498 <HardFault_Handler+0xc>)
 8000492:	f000 f9b1 	bl	80007f8 <puts>
	while(1);
 8000496:	e7fe      	b.n	8000496 <HardFault_Handler+0xa>
 8000498:	08001194 	.word	0x08001194

0800049c <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	printf("Exception : MemManage!\n");
 80004a0:	4801      	ldr	r0, [pc, #4]	; (80004a8 <MemManage_Handler+0xc>)
 80004a2:	f000 f9a9 	bl	80007f8 <puts>
	while(1);
 80004a6:	e7fe      	b.n	80004a6 <MemManage_Handler+0xa>
 80004a8:	080011ac 	.word	0x080011ac

080004ac <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	printf("Exception : BusFault!\n");
 80004b0:	4801      	ldr	r0, [pc, #4]	; (80004b8 <BusFault_Handler+0xc>)
 80004b2:	f000 f9a1 	bl	80007f8 <puts>
	while(1);
 80004b6:	e7fe      	b.n	80004b6 <BusFault_Handler+0xa>
 80004b8:	080011c4 	.word	0x080011c4

080004bc <UsageFault_Handler>:
}

void UsageFault_Handler(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	printf("Exception : UsageFault!\n");
 80004c0:	4801      	ldr	r0, [pc, #4]	; (80004c8 <UsageFault_Handler+0xc>)
 80004c2:	f000 f999 	bl	80007f8 <puts>
	while(1);
 80004c6:	e7fe      	b.n	80004c6 <UsageFault_Handler+0xa>
 80004c8:	080011dc 	.word	0x080011dc

080004cc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004d6:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <ITM_SendChar+0x48>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <ITM_SendChar+0x48>)
 80004dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004e0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004e2:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <ITM_SendChar+0x4c>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a0c      	ldr	r2, [pc, #48]	; (8000518 <ITM_SendChar+0x4c>)
 80004e8:	f043 0301 	orr.w	r3, r3, #1
 80004ec:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004ee:	bf00      	nop
 80004f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d0f8      	beq.n	80004f0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004fe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	6013      	str	r3, [r2, #0]
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	e000edfc 	.word	0xe000edfc
 8000518:	e0000e00 	.word	0xe0000e00

0800051c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000528:	2300      	movs	r3, #0
 800052a:	617b      	str	r3, [r7, #20]
 800052c:	e00a      	b.n	8000544 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800052e:	f3af 8000 	nop.w
 8000532:	4601      	mov	r1, r0
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	1c5a      	adds	r2, r3, #1
 8000538:	60ba      	str	r2, [r7, #8]
 800053a:	b2ca      	uxtb	r2, r1
 800053c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	3301      	adds	r3, #1
 8000542:	617b      	str	r3, [r7, #20]
 8000544:	697a      	ldr	r2, [r7, #20]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	429a      	cmp	r2, r3
 800054a:	dbf0      	blt.n	800052e <_read+0x12>
  }

  return len;
 800054c:	687b      	ldr	r3, [r7, #4]
}
 800054e:	4618      	mov	r0, r3
 8000550:	3718      	adds	r7, #24
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}

08000556 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000556:	b580      	push	{r7, lr}
 8000558:	b086      	sub	sp, #24
 800055a:	af00      	add	r7, sp, #0
 800055c:	60f8      	str	r0, [r7, #12]
 800055e:	60b9      	str	r1, [r7, #8]
 8000560:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
 8000566:	e009      	b.n	800057c <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	1c5a      	adds	r2, r3, #1
 800056c:	60ba      	str	r2, [r7, #8]
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff ffab 	bl	80004cc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	3301      	adds	r3, #1
 800057a:	617b      	str	r3, [r7, #20]
 800057c:	697a      	ldr	r2, [r7, #20]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	429a      	cmp	r2, r3
 8000582:	dbf1      	blt.n	8000568 <_write+0x12>
  }
  return len;
 8000584:	687b      	ldr	r3, [r7, #4]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3718      	adds	r7, #24
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <_close>:

int _close(int file)
{
 800058e:	b480      	push	{r7}
 8000590:	b083      	sub	sp, #12
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800059a:	4618      	mov	r0, r3
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr

080005a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005a6:	b480      	push	{r7}
 80005a8:	b083      	sub	sp, #12
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
 80005ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005b6:	605a      	str	r2, [r3, #4]
  return 0;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <_isatty>:

int _isatty(int file)
{
 80005c6:	b480      	push	{r7}
 80005c8:	b083      	sub	sp, #12
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005ce:	2301      	movs	r3, #1
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005e8:	2300      	movs	r3, #0
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
	...

080005f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000600:	4a14      	ldr	r2, [pc, #80]	; (8000654 <_sbrk+0x5c>)
 8000602:	4b15      	ldr	r3, [pc, #84]	; (8000658 <_sbrk+0x60>)
 8000604:	1ad3      	subs	r3, r2, r3
 8000606:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800060c:	4b13      	ldr	r3, [pc, #76]	; (800065c <_sbrk+0x64>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d102      	bne.n	800061a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <_sbrk+0x64>)
 8000616:	4a12      	ldr	r2, [pc, #72]	; (8000660 <_sbrk+0x68>)
 8000618:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <_sbrk+0x64>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4413      	add	r3, r2
 8000622:	693a      	ldr	r2, [r7, #16]
 8000624:	429a      	cmp	r2, r3
 8000626:	d207      	bcs.n	8000638 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000628:	f000 f846 	bl	80006b8 <__errno>
 800062c:	4603      	mov	r3, r0
 800062e:	220c      	movs	r2, #12
 8000630:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000636:	e009      	b.n	800064c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000638:	4b08      	ldr	r3, [pc, #32]	; (800065c <_sbrk+0x64>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800063e:	4b07      	ldr	r3, [pc, #28]	; (800065c <_sbrk+0x64>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4413      	add	r3, r2
 8000646:	4a05      	ldr	r2, [pc, #20]	; (800065c <_sbrk+0x64>)
 8000648:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800064a:	68fb      	ldr	r3, [r7, #12]
}
 800064c:	4618      	mov	r0, r3
 800064e:	3718      	adds	r7, #24
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20020000 	.word	0x20020000
 8000658:	00000400 	.word	0x00000400
 800065c:	200000a4 	.word	0x200000a4
 8000660:	200000b8 	.word	0x200000b8

08000664 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000664:	480d      	ldr	r0, [pc, #52]	; (800069c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000666:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000668:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800066c:	480c      	ldr	r0, [pc, #48]	; (80006a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800066e:	490d      	ldr	r1, [pc, #52]	; (80006a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000670:	4a0d      	ldr	r2, [pc, #52]	; (80006a8 <LoopForever+0xe>)
  movs r3, #0
 8000672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000674:	e002      	b.n	800067c <LoopCopyDataInit>

08000676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067a:	3304      	adds	r3, #4

0800067c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800067c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000680:	d3f9      	bcc.n	8000676 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000682:	4a0a      	ldr	r2, [pc, #40]	; (80006ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000684:	4c0a      	ldr	r4, [pc, #40]	; (80006b0 <LoopForever+0x16>)
  movs r3, #0
 8000686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000688:	e001      	b.n	800068e <LoopFillZerobss>

0800068a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800068c:	3204      	adds	r2, #4

0800068e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000690:	d3fb      	bcc.n	800068a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000692:	f000 f817 	bl	80006c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000696:	f7ff fda7 	bl	80001e8 <main>

0800069a <LoopForever>:

LoopForever:
  b LoopForever
 800069a:	e7fe      	b.n	800069a <LoopForever>
  ldr   r0, =_estack
 800069c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80006a8:	08001260 	.word	0x08001260
  ldr r2, =_sbss
 80006ac:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80006b0:	200000b8 	.word	0x200000b8

080006b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b4:	e7fe      	b.n	80006b4 <ADC_IRQHandler>
	...

080006b8 <__errno>:
 80006b8:	4b01      	ldr	r3, [pc, #4]	; (80006c0 <__errno+0x8>)
 80006ba:	6818      	ldr	r0, [r3, #0]
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	20000010 	.word	0x20000010

080006c4 <__libc_init_array>:
 80006c4:	b570      	push	{r4, r5, r6, lr}
 80006c6:	4d0d      	ldr	r5, [pc, #52]	; (80006fc <__libc_init_array+0x38>)
 80006c8:	4c0d      	ldr	r4, [pc, #52]	; (8000700 <__libc_init_array+0x3c>)
 80006ca:	1b64      	subs	r4, r4, r5
 80006cc:	10a4      	asrs	r4, r4, #2
 80006ce:	2600      	movs	r6, #0
 80006d0:	42a6      	cmp	r6, r4
 80006d2:	d109      	bne.n	80006e8 <__libc_init_array+0x24>
 80006d4:	4d0b      	ldr	r5, [pc, #44]	; (8000704 <__libc_init_array+0x40>)
 80006d6:	4c0c      	ldr	r4, [pc, #48]	; (8000708 <__libc_init_array+0x44>)
 80006d8:	f000 fd1e 	bl	8001118 <_init>
 80006dc:	1b64      	subs	r4, r4, r5
 80006de:	10a4      	asrs	r4, r4, #2
 80006e0:	2600      	movs	r6, #0
 80006e2:	42a6      	cmp	r6, r4
 80006e4:	d105      	bne.n	80006f2 <__libc_init_array+0x2e>
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ec:	4798      	blx	r3
 80006ee:	3601      	adds	r6, #1
 80006f0:	e7ee      	b.n	80006d0 <__libc_init_array+0xc>
 80006f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80006f6:	4798      	blx	r3
 80006f8:	3601      	adds	r6, #1
 80006fa:	e7f2      	b.n	80006e2 <__libc_init_array+0x1e>
 80006fc:	08001258 	.word	0x08001258
 8000700:	08001258 	.word	0x08001258
 8000704:	08001258 	.word	0x08001258
 8000708:	0800125c 	.word	0x0800125c

0800070c <memset>:
 800070c:	4402      	add	r2, r0
 800070e:	4603      	mov	r3, r0
 8000710:	4293      	cmp	r3, r2
 8000712:	d100      	bne.n	8000716 <memset+0xa>
 8000714:	4770      	bx	lr
 8000716:	f803 1b01 	strb.w	r1, [r3], #1
 800071a:	e7f9      	b.n	8000710 <memset+0x4>

0800071c <_puts_r>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	460e      	mov	r6, r1
 8000720:	4605      	mov	r5, r0
 8000722:	b118      	cbz	r0, 800072c <_puts_r+0x10>
 8000724:	6983      	ldr	r3, [r0, #24]
 8000726:	b90b      	cbnz	r3, 800072c <_puts_r+0x10>
 8000728:	f000 fa48 	bl	8000bbc <__sinit>
 800072c:	69ab      	ldr	r3, [r5, #24]
 800072e:	68ac      	ldr	r4, [r5, #8]
 8000730:	b913      	cbnz	r3, 8000738 <_puts_r+0x1c>
 8000732:	4628      	mov	r0, r5
 8000734:	f000 fa42 	bl	8000bbc <__sinit>
 8000738:	4b2c      	ldr	r3, [pc, #176]	; (80007ec <_puts_r+0xd0>)
 800073a:	429c      	cmp	r4, r3
 800073c:	d120      	bne.n	8000780 <_puts_r+0x64>
 800073e:	686c      	ldr	r4, [r5, #4]
 8000740:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000742:	07db      	lsls	r3, r3, #31
 8000744:	d405      	bmi.n	8000752 <_puts_r+0x36>
 8000746:	89a3      	ldrh	r3, [r4, #12]
 8000748:	0598      	lsls	r0, r3, #22
 800074a:	d402      	bmi.n	8000752 <_puts_r+0x36>
 800074c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800074e:	f000 fad3 	bl	8000cf8 <__retarget_lock_acquire_recursive>
 8000752:	89a3      	ldrh	r3, [r4, #12]
 8000754:	0719      	lsls	r1, r3, #28
 8000756:	d51d      	bpl.n	8000794 <_puts_r+0x78>
 8000758:	6923      	ldr	r3, [r4, #16]
 800075a:	b1db      	cbz	r3, 8000794 <_puts_r+0x78>
 800075c:	3e01      	subs	r6, #1
 800075e:	68a3      	ldr	r3, [r4, #8]
 8000760:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000764:	3b01      	subs	r3, #1
 8000766:	60a3      	str	r3, [r4, #8]
 8000768:	bb39      	cbnz	r1, 80007ba <_puts_r+0x9e>
 800076a:	2b00      	cmp	r3, #0
 800076c:	da38      	bge.n	80007e0 <_puts_r+0xc4>
 800076e:	4622      	mov	r2, r4
 8000770:	210a      	movs	r1, #10
 8000772:	4628      	mov	r0, r5
 8000774:	f000 f848 	bl	8000808 <__swbuf_r>
 8000778:	3001      	adds	r0, #1
 800077a:	d011      	beq.n	80007a0 <_puts_r+0x84>
 800077c:	250a      	movs	r5, #10
 800077e:	e011      	b.n	80007a4 <_puts_r+0x88>
 8000780:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <_puts_r+0xd4>)
 8000782:	429c      	cmp	r4, r3
 8000784:	d101      	bne.n	800078a <_puts_r+0x6e>
 8000786:	68ac      	ldr	r4, [r5, #8]
 8000788:	e7da      	b.n	8000740 <_puts_r+0x24>
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <_puts_r+0xd8>)
 800078c:	429c      	cmp	r4, r3
 800078e:	bf08      	it	eq
 8000790:	68ec      	ldreq	r4, [r5, #12]
 8000792:	e7d5      	b.n	8000740 <_puts_r+0x24>
 8000794:	4621      	mov	r1, r4
 8000796:	4628      	mov	r0, r5
 8000798:	f000 f888 	bl	80008ac <__swsetup_r>
 800079c:	2800      	cmp	r0, #0
 800079e:	d0dd      	beq.n	800075c <_puts_r+0x40>
 80007a0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80007a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007a6:	07da      	lsls	r2, r3, #31
 80007a8:	d405      	bmi.n	80007b6 <_puts_r+0x9a>
 80007aa:	89a3      	ldrh	r3, [r4, #12]
 80007ac:	059b      	lsls	r3, r3, #22
 80007ae:	d402      	bmi.n	80007b6 <_puts_r+0x9a>
 80007b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007b2:	f000 faa2 	bl	8000cfa <__retarget_lock_release_recursive>
 80007b6:	4628      	mov	r0, r5
 80007b8:	bd70      	pop	{r4, r5, r6, pc}
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	da04      	bge.n	80007c8 <_puts_r+0xac>
 80007be:	69a2      	ldr	r2, [r4, #24]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	dc06      	bgt.n	80007d2 <_puts_r+0xb6>
 80007c4:	290a      	cmp	r1, #10
 80007c6:	d004      	beq.n	80007d2 <_puts_r+0xb6>
 80007c8:	6823      	ldr	r3, [r4, #0]
 80007ca:	1c5a      	adds	r2, r3, #1
 80007cc:	6022      	str	r2, [r4, #0]
 80007ce:	7019      	strb	r1, [r3, #0]
 80007d0:	e7c5      	b.n	800075e <_puts_r+0x42>
 80007d2:	4622      	mov	r2, r4
 80007d4:	4628      	mov	r0, r5
 80007d6:	f000 f817 	bl	8000808 <__swbuf_r>
 80007da:	3001      	adds	r0, #1
 80007dc:	d1bf      	bne.n	800075e <_puts_r+0x42>
 80007de:	e7df      	b.n	80007a0 <_puts_r+0x84>
 80007e0:	6823      	ldr	r3, [r4, #0]
 80007e2:	250a      	movs	r5, #10
 80007e4:	1c5a      	adds	r2, r3, #1
 80007e6:	6022      	str	r2, [r4, #0]
 80007e8:	701d      	strb	r5, [r3, #0]
 80007ea:	e7db      	b.n	80007a4 <_puts_r+0x88>
 80007ec:	08001218 	.word	0x08001218
 80007f0:	08001238 	.word	0x08001238
 80007f4:	080011f8 	.word	0x080011f8

080007f8 <puts>:
 80007f8:	4b02      	ldr	r3, [pc, #8]	; (8000804 <puts+0xc>)
 80007fa:	4601      	mov	r1, r0
 80007fc:	6818      	ldr	r0, [r3, #0]
 80007fe:	f7ff bf8d 	b.w	800071c <_puts_r>
 8000802:	bf00      	nop
 8000804:	20000010 	.word	0x20000010

08000808 <__swbuf_r>:
 8000808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800080a:	460e      	mov	r6, r1
 800080c:	4614      	mov	r4, r2
 800080e:	4605      	mov	r5, r0
 8000810:	b118      	cbz	r0, 800081a <__swbuf_r+0x12>
 8000812:	6983      	ldr	r3, [r0, #24]
 8000814:	b90b      	cbnz	r3, 800081a <__swbuf_r+0x12>
 8000816:	f000 f9d1 	bl	8000bbc <__sinit>
 800081a:	4b21      	ldr	r3, [pc, #132]	; (80008a0 <__swbuf_r+0x98>)
 800081c:	429c      	cmp	r4, r3
 800081e:	d12b      	bne.n	8000878 <__swbuf_r+0x70>
 8000820:	686c      	ldr	r4, [r5, #4]
 8000822:	69a3      	ldr	r3, [r4, #24]
 8000824:	60a3      	str	r3, [r4, #8]
 8000826:	89a3      	ldrh	r3, [r4, #12]
 8000828:	071a      	lsls	r2, r3, #28
 800082a:	d52f      	bpl.n	800088c <__swbuf_r+0x84>
 800082c:	6923      	ldr	r3, [r4, #16]
 800082e:	b36b      	cbz	r3, 800088c <__swbuf_r+0x84>
 8000830:	6923      	ldr	r3, [r4, #16]
 8000832:	6820      	ldr	r0, [r4, #0]
 8000834:	1ac0      	subs	r0, r0, r3
 8000836:	6963      	ldr	r3, [r4, #20]
 8000838:	b2f6      	uxtb	r6, r6
 800083a:	4283      	cmp	r3, r0
 800083c:	4637      	mov	r7, r6
 800083e:	dc04      	bgt.n	800084a <__swbuf_r+0x42>
 8000840:	4621      	mov	r1, r4
 8000842:	4628      	mov	r0, r5
 8000844:	f000 f926 	bl	8000a94 <_fflush_r>
 8000848:	bb30      	cbnz	r0, 8000898 <__swbuf_r+0x90>
 800084a:	68a3      	ldr	r3, [r4, #8]
 800084c:	3b01      	subs	r3, #1
 800084e:	60a3      	str	r3, [r4, #8]
 8000850:	6823      	ldr	r3, [r4, #0]
 8000852:	1c5a      	adds	r2, r3, #1
 8000854:	6022      	str	r2, [r4, #0]
 8000856:	701e      	strb	r6, [r3, #0]
 8000858:	6963      	ldr	r3, [r4, #20]
 800085a:	3001      	adds	r0, #1
 800085c:	4283      	cmp	r3, r0
 800085e:	d004      	beq.n	800086a <__swbuf_r+0x62>
 8000860:	89a3      	ldrh	r3, [r4, #12]
 8000862:	07db      	lsls	r3, r3, #31
 8000864:	d506      	bpl.n	8000874 <__swbuf_r+0x6c>
 8000866:	2e0a      	cmp	r6, #10
 8000868:	d104      	bne.n	8000874 <__swbuf_r+0x6c>
 800086a:	4621      	mov	r1, r4
 800086c:	4628      	mov	r0, r5
 800086e:	f000 f911 	bl	8000a94 <_fflush_r>
 8000872:	b988      	cbnz	r0, 8000898 <__swbuf_r+0x90>
 8000874:	4638      	mov	r0, r7
 8000876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <__swbuf_r+0x9c>)
 800087a:	429c      	cmp	r4, r3
 800087c:	d101      	bne.n	8000882 <__swbuf_r+0x7a>
 800087e:	68ac      	ldr	r4, [r5, #8]
 8000880:	e7cf      	b.n	8000822 <__swbuf_r+0x1a>
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <__swbuf_r+0xa0>)
 8000884:	429c      	cmp	r4, r3
 8000886:	bf08      	it	eq
 8000888:	68ec      	ldreq	r4, [r5, #12]
 800088a:	e7ca      	b.n	8000822 <__swbuf_r+0x1a>
 800088c:	4621      	mov	r1, r4
 800088e:	4628      	mov	r0, r5
 8000890:	f000 f80c 	bl	80008ac <__swsetup_r>
 8000894:	2800      	cmp	r0, #0
 8000896:	d0cb      	beq.n	8000830 <__swbuf_r+0x28>
 8000898:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800089c:	e7ea      	b.n	8000874 <__swbuf_r+0x6c>
 800089e:	bf00      	nop
 80008a0:	08001218 	.word	0x08001218
 80008a4:	08001238 	.word	0x08001238
 80008a8:	080011f8 	.word	0x080011f8

080008ac <__swsetup_r>:
 80008ac:	4b32      	ldr	r3, [pc, #200]	; (8000978 <__swsetup_r+0xcc>)
 80008ae:	b570      	push	{r4, r5, r6, lr}
 80008b0:	681d      	ldr	r5, [r3, #0]
 80008b2:	4606      	mov	r6, r0
 80008b4:	460c      	mov	r4, r1
 80008b6:	b125      	cbz	r5, 80008c2 <__swsetup_r+0x16>
 80008b8:	69ab      	ldr	r3, [r5, #24]
 80008ba:	b913      	cbnz	r3, 80008c2 <__swsetup_r+0x16>
 80008bc:	4628      	mov	r0, r5
 80008be:	f000 f97d 	bl	8000bbc <__sinit>
 80008c2:	4b2e      	ldr	r3, [pc, #184]	; (800097c <__swsetup_r+0xd0>)
 80008c4:	429c      	cmp	r4, r3
 80008c6:	d10f      	bne.n	80008e8 <__swsetup_r+0x3c>
 80008c8:	686c      	ldr	r4, [r5, #4]
 80008ca:	89a3      	ldrh	r3, [r4, #12]
 80008cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80008d0:	0719      	lsls	r1, r3, #28
 80008d2:	d42c      	bmi.n	800092e <__swsetup_r+0x82>
 80008d4:	06dd      	lsls	r5, r3, #27
 80008d6:	d411      	bmi.n	80008fc <__swsetup_r+0x50>
 80008d8:	2309      	movs	r3, #9
 80008da:	6033      	str	r3, [r6, #0]
 80008dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80008e0:	81a3      	strh	r3, [r4, #12]
 80008e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008e6:	e03e      	b.n	8000966 <__swsetup_r+0xba>
 80008e8:	4b25      	ldr	r3, [pc, #148]	; (8000980 <__swsetup_r+0xd4>)
 80008ea:	429c      	cmp	r4, r3
 80008ec:	d101      	bne.n	80008f2 <__swsetup_r+0x46>
 80008ee:	68ac      	ldr	r4, [r5, #8]
 80008f0:	e7eb      	b.n	80008ca <__swsetup_r+0x1e>
 80008f2:	4b24      	ldr	r3, [pc, #144]	; (8000984 <__swsetup_r+0xd8>)
 80008f4:	429c      	cmp	r4, r3
 80008f6:	bf08      	it	eq
 80008f8:	68ec      	ldreq	r4, [r5, #12]
 80008fa:	e7e6      	b.n	80008ca <__swsetup_r+0x1e>
 80008fc:	0758      	lsls	r0, r3, #29
 80008fe:	d512      	bpl.n	8000926 <__swsetup_r+0x7a>
 8000900:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000902:	b141      	cbz	r1, 8000916 <__swsetup_r+0x6a>
 8000904:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000908:	4299      	cmp	r1, r3
 800090a:	d002      	beq.n	8000912 <__swsetup_r+0x66>
 800090c:	4630      	mov	r0, r6
 800090e:	f000 fa5b 	bl	8000dc8 <_free_r>
 8000912:	2300      	movs	r3, #0
 8000914:	6363      	str	r3, [r4, #52]	; 0x34
 8000916:	89a3      	ldrh	r3, [r4, #12]
 8000918:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800091c:	81a3      	strh	r3, [r4, #12]
 800091e:	2300      	movs	r3, #0
 8000920:	6063      	str	r3, [r4, #4]
 8000922:	6923      	ldr	r3, [r4, #16]
 8000924:	6023      	str	r3, [r4, #0]
 8000926:	89a3      	ldrh	r3, [r4, #12]
 8000928:	f043 0308 	orr.w	r3, r3, #8
 800092c:	81a3      	strh	r3, [r4, #12]
 800092e:	6923      	ldr	r3, [r4, #16]
 8000930:	b94b      	cbnz	r3, 8000946 <__swsetup_r+0x9a>
 8000932:	89a3      	ldrh	r3, [r4, #12]
 8000934:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800093c:	d003      	beq.n	8000946 <__swsetup_r+0x9a>
 800093e:	4621      	mov	r1, r4
 8000940:	4630      	mov	r0, r6
 8000942:	f000 fa01 	bl	8000d48 <__smakebuf_r>
 8000946:	89a0      	ldrh	r0, [r4, #12]
 8000948:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800094c:	f010 0301 	ands.w	r3, r0, #1
 8000950:	d00a      	beq.n	8000968 <__swsetup_r+0xbc>
 8000952:	2300      	movs	r3, #0
 8000954:	60a3      	str	r3, [r4, #8]
 8000956:	6963      	ldr	r3, [r4, #20]
 8000958:	425b      	negs	r3, r3
 800095a:	61a3      	str	r3, [r4, #24]
 800095c:	6923      	ldr	r3, [r4, #16]
 800095e:	b943      	cbnz	r3, 8000972 <__swsetup_r+0xc6>
 8000960:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000964:	d1ba      	bne.n	80008dc <__swsetup_r+0x30>
 8000966:	bd70      	pop	{r4, r5, r6, pc}
 8000968:	0781      	lsls	r1, r0, #30
 800096a:	bf58      	it	pl
 800096c:	6963      	ldrpl	r3, [r4, #20]
 800096e:	60a3      	str	r3, [r4, #8]
 8000970:	e7f4      	b.n	800095c <__swsetup_r+0xb0>
 8000972:	2000      	movs	r0, #0
 8000974:	e7f7      	b.n	8000966 <__swsetup_r+0xba>
 8000976:	bf00      	nop
 8000978:	20000010 	.word	0x20000010
 800097c:	08001218 	.word	0x08001218
 8000980:	08001238 	.word	0x08001238
 8000984:	080011f8 	.word	0x080011f8

08000988 <__sflush_r>:
 8000988:	898a      	ldrh	r2, [r1, #12]
 800098a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800098e:	4605      	mov	r5, r0
 8000990:	0710      	lsls	r0, r2, #28
 8000992:	460c      	mov	r4, r1
 8000994:	d458      	bmi.n	8000a48 <__sflush_r+0xc0>
 8000996:	684b      	ldr	r3, [r1, #4]
 8000998:	2b00      	cmp	r3, #0
 800099a:	dc05      	bgt.n	80009a8 <__sflush_r+0x20>
 800099c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800099e:	2b00      	cmp	r3, #0
 80009a0:	dc02      	bgt.n	80009a8 <__sflush_r+0x20>
 80009a2:	2000      	movs	r0, #0
 80009a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d0f9      	beq.n	80009a2 <__sflush_r+0x1a>
 80009ae:	2300      	movs	r3, #0
 80009b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80009b4:	682f      	ldr	r7, [r5, #0]
 80009b6:	602b      	str	r3, [r5, #0]
 80009b8:	d032      	beq.n	8000a20 <__sflush_r+0x98>
 80009ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80009bc:	89a3      	ldrh	r3, [r4, #12]
 80009be:	075a      	lsls	r2, r3, #29
 80009c0:	d505      	bpl.n	80009ce <__sflush_r+0x46>
 80009c2:	6863      	ldr	r3, [r4, #4]
 80009c4:	1ac0      	subs	r0, r0, r3
 80009c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80009c8:	b10b      	cbz	r3, 80009ce <__sflush_r+0x46>
 80009ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009cc:	1ac0      	subs	r0, r0, r3
 80009ce:	2300      	movs	r3, #0
 80009d0:	4602      	mov	r2, r0
 80009d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80009d4:	6a21      	ldr	r1, [r4, #32]
 80009d6:	4628      	mov	r0, r5
 80009d8:	47b0      	blx	r6
 80009da:	1c43      	adds	r3, r0, #1
 80009dc:	89a3      	ldrh	r3, [r4, #12]
 80009de:	d106      	bne.n	80009ee <__sflush_r+0x66>
 80009e0:	6829      	ldr	r1, [r5, #0]
 80009e2:	291d      	cmp	r1, #29
 80009e4:	d82c      	bhi.n	8000a40 <__sflush_r+0xb8>
 80009e6:	4a2a      	ldr	r2, [pc, #168]	; (8000a90 <__sflush_r+0x108>)
 80009e8:	40ca      	lsrs	r2, r1
 80009ea:	07d6      	lsls	r6, r2, #31
 80009ec:	d528      	bpl.n	8000a40 <__sflush_r+0xb8>
 80009ee:	2200      	movs	r2, #0
 80009f0:	6062      	str	r2, [r4, #4]
 80009f2:	04d9      	lsls	r1, r3, #19
 80009f4:	6922      	ldr	r2, [r4, #16]
 80009f6:	6022      	str	r2, [r4, #0]
 80009f8:	d504      	bpl.n	8000a04 <__sflush_r+0x7c>
 80009fa:	1c42      	adds	r2, r0, #1
 80009fc:	d101      	bne.n	8000a02 <__sflush_r+0x7a>
 80009fe:	682b      	ldr	r3, [r5, #0]
 8000a00:	b903      	cbnz	r3, 8000a04 <__sflush_r+0x7c>
 8000a02:	6560      	str	r0, [r4, #84]	; 0x54
 8000a04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a06:	602f      	str	r7, [r5, #0]
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	d0ca      	beq.n	80009a2 <__sflush_r+0x1a>
 8000a0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a10:	4299      	cmp	r1, r3
 8000a12:	d002      	beq.n	8000a1a <__sflush_r+0x92>
 8000a14:	4628      	mov	r0, r5
 8000a16:	f000 f9d7 	bl	8000dc8 <_free_r>
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	6360      	str	r0, [r4, #52]	; 0x34
 8000a1e:	e7c1      	b.n	80009a4 <__sflush_r+0x1c>
 8000a20:	6a21      	ldr	r1, [r4, #32]
 8000a22:	2301      	movs	r3, #1
 8000a24:	4628      	mov	r0, r5
 8000a26:	47b0      	blx	r6
 8000a28:	1c41      	adds	r1, r0, #1
 8000a2a:	d1c7      	bne.n	80009bc <__sflush_r+0x34>
 8000a2c:	682b      	ldr	r3, [r5, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d0c4      	beq.n	80009bc <__sflush_r+0x34>
 8000a32:	2b1d      	cmp	r3, #29
 8000a34:	d001      	beq.n	8000a3a <__sflush_r+0xb2>
 8000a36:	2b16      	cmp	r3, #22
 8000a38:	d101      	bne.n	8000a3e <__sflush_r+0xb6>
 8000a3a:	602f      	str	r7, [r5, #0]
 8000a3c:	e7b1      	b.n	80009a2 <__sflush_r+0x1a>
 8000a3e:	89a3      	ldrh	r3, [r4, #12]
 8000a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a44:	81a3      	strh	r3, [r4, #12]
 8000a46:	e7ad      	b.n	80009a4 <__sflush_r+0x1c>
 8000a48:	690f      	ldr	r7, [r1, #16]
 8000a4a:	2f00      	cmp	r7, #0
 8000a4c:	d0a9      	beq.n	80009a2 <__sflush_r+0x1a>
 8000a4e:	0793      	lsls	r3, r2, #30
 8000a50:	680e      	ldr	r6, [r1, #0]
 8000a52:	bf08      	it	eq
 8000a54:	694b      	ldreq	r3, [r1, #20]
 8000a56:	600f      	str	r7, [r1, #0]
 8000a58:	bf18      	it	ne
 8000a5a:	2300      	movne	r3, #0
 8000a5c:	eba6 0807 	sub.w	r8, r6, r7
 8000a60:	608b      	str	r3, [r1, #8]
 8000a62:	f1b8 0f00 	cmp.w	r8, #0
 8000a66:	dd9c      	ble.n	80009a2 <__sflush_r+0x1a>
 8000a68:	6a21      	ldr	r1, [r4, #32]
 8000a6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000a6c:	4643      	mov	r3, r8
 8000a6e:	463a      	mov	r2, r7
 8000a70:	4628      	mov	r0, r5
 8000a72:	47b0      	blx	r6
 8000a74:	2800      	cmp	r0, #0
 8000a76:	dc06      	bgt.n	8000a86 <__sflush_r+0xfe>
 8000a78:	89a3      	ldrh	r3, [r4, #12]
 8000a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a7e:	81a3      	strh	r3, [r4, #12]
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a84:	e78e      	b.n	80009a4 <__sflush_r+0x1c>
 8000a86:	4407      	add	r7, r0
 8000a88:	eba8 0800 	sub.w	r8, r8, r0
 8000a8c:	e7e9      	b.n	8000a62 <__sflush_r+0xda>
 8000a8e:	bf00      	nop
 8000a90:	20400001 	.word	0x20400001

08000a94 <_fflush_r>:
 8000a94:	b538      	push	{r3, r4, r5, lr}
 8000a96:	690b      	ldr	r3, [r1, #16]
 8000a98:	4605      	mov	r5, r0
 8000a9a:	460c      	mov	r4, r1
 8000a9c:	b913      	cbnz	r3, 8000aa4 <_fflush_r+0x10>
 8000a9e:	2500      	movs	r5, #0
 8000aa0:	4628      	mov	r0, r5
 8000aa2:	bd38      	pop	{r3, r4, r5, pc}
 8000aa4:	b118      	cbz	r0, 8000aae <_fflush_r+0x1a>
 8000aa6:	6983      	ldr	r3, [r0, #24]
 8000aa8:	b90b      	cbnz	r3, 8000aae <_fflush_r+0x1a>
 8000aaa:	f000 f887 	bl	8000bbc <__sinit>
 8000aae:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <_fflush_r+0x6c>)
 8000ab0:	429c      	cmp	r4, r3
 8000ab2:	d11b      	bne.n	8000aec <_fflush_r+0x58>
 8000ab4:	686c      	ldr	r4, [r5, #4]
 8000ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d0ef      	beq.n	8000a9e <_fflush_r+0xa>
 8000abe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000ac0:	07d0      	lsls	r0, r2, #31
 8000ac2:	d404      	bmi.n	8000ace <_fflush_r+0x3a>
 8000ac4:	0599      	lsls	r1, r3, #22
 8000ac6:	d402      	bmi.n	8000ace <_fflush_r+0x3a>
 8000ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000aca:	f000 f915 	bl	8000cf8 <__retarget_lock_acquire_recursive>
 8000ace:	4628      	mov	r0, r5
 8000ad0:	4621      	mov	r1, r4
 8000ad2:	f7ff ff59 	bl	8000988 <__sflush_r>
 8000ad6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000ad8:	07da      	lsls	r2, r3, #31
 8000ada:	4605      	mov	r5, r0
 8000adc:	d4e0      	bmi.n	8000aa0 <_fflush_r+0xc>
 8000ade:	89a3      	ldrh	r3, [r4, #12]
 8000ae0:	059b      	lsls	r3, r3, #22
 8000ae2:	d4dd      	bmi.n	8000aa0 <_fflush_r+0xc>
 8000ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ae6:	f000 f908 	bl	8000cfa <__retarget_lock_release_recursive>
 8000aea:	e7d9      	b.n	8000aa0 <_fflush_r+0xc>
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <_fflush_r+0x70>)
 8000aee:	429c      	cmp	r4, r3
 8000af0:	d101      	bne.n	8000af6 <_fflush_r+0x62>
 8000af2:	68ac      	ldr	r4, [r5, #8]
 8000af4:	e7df      	b.n	8000ab6 <_fflush_r+0x22>
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <_fflush_r+0x74>)
 8000af8:	429c      	cmp	r4, r3
 8000afa:	bf08      	it	eq
 8000afc:	68ec      	ldreq	r4, [r5, #12]
 8000afe:	e7da      	b.n	8000ab6 <_fflush_r+0x22>
 8000b00:	08001218 	.word	0x08001218
 8000b04:	08001238 	.word	0x08001238
 8000b08:	080011f8 	.word	0x080011f8

08000b0c <std>:
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	b510      	push	{r4, lr}
 8000b10:	4604      	mov	r4, r0
 8000b12:	e9c0 3300 	strd	r3, r3, [r0]
 8000b16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000b1a:	6083      	str	r3, [r0, #8]
 8000b1c:	8181      	strh	r1, [r0, #12]
 8000b1e:	6643      	str	r3, [r0, #100]	; 0x64
 8000b20:	81c2      	strh	r2, [r0, #14]
 8000b22:	6183      	str	r3, [r0, #24]
 8000b24:	4619      	mov	r1, r3
 8000b26:	2208      	movs	r2, #8
 8000b28:	305c      	adds	r0, #92	; 0x5c
 8000b2a:	f7ff fdef 	bl	800070c <memset>
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <std+0x38>)
 8000b30:	6263      	str	r3, [r4, #36]	; 0x24
 8000b32:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <std+0x3c>)
 8000b34:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b36:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <std+0x40>)
 8000b38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b3a:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <std+0x44>)
 8000b3c:	6224      	str	r4, [r4, #32]
 8000b3e:	6323      	str	r3, [r4, #48]	; 0x30
 8000b40:	bd10      	pop	{r4, pc}
 8000b42:	bf00      	nop
 8000b44:	08000fa9 	.word	0x08000fa9
 8000b48:	08000fcb 	.word	0x08000fcb
 8000b4c:	08001003 	.word	0x08001003
 8000b50:	08001027 	.word	0x08001027

08000b54 <_cleanup_r>:
 8000b54:	4901      	ldr	r1, [pc, #4]	; (8000b5c <_cleanup_r+0x8>)
 8000b56:	f000 b8af 	b.w	8000cb8 <_fwalk_reent>
 8000b5a:	bf00      	nop
 8000b5c:	08000a95 	.word	0x08000a95

08000b60 <__sfmoreglue>:
 8000b60:	b570      	push	{r4, r5, r6, lr}
 8000b62:	2268      	movs	r2, #104	; 0x68
 8000b64:	1e4d      	subs	r5, r1, #1
 8000b66:	4355      	muls	r5, r2
 8000b68:	460e      	mov	r6, r1
 8000b6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000b6e:	f000 f997 	bl	8000ea0 <_malloc_r>
 8000b72:	4604      	mov	r4, r0
 8000b74:	b140      	cbz	r0, 8000b88 <__sfmoreglue+0x28>
 8000b76:	2100      	movs	r1, #0
 8000b78:	e9c0 1600 	strd	r1, r6, [r0]
 8000b7c:	300c      	adds	r0, #12
 8000b7e:	60a0      	str	r0, [r4, #8]
 8000b80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000b84:	f7ff fdc2 	bl	800070c <memset>
 8000b88:	4620      	mov	r0, r4
 8000b8a:	bd70      	pop	{r4, r5, r6, pc}

08000b8c <__sfp_lock_acquire>:
 8000b8c:	4801      	ldr	r0, [pc, #4]	; (8000b94 <__sfp_lock_acquire+0x8>)
 8000b8e:	f000 b8b3 	b.w	8000cf8 <__retarget_lock_acquire_recursive>
 8000b92:	bf00      	nop
 8000b94:	200000a9 	.word	0x200000a9

08000b98 <__sfp_lock_release>:
 8000b98:	4801      	ldr	r0, [pc, #4]	; (8000ba0 <__sfp_lock_release+0x8>)
 8000b9a:	f000 b8ae 	b.w	8000cfa <__retarget_lock_release_recursive>
 8000b9e:	bf00      	nop
 8000ba0:	200000a9 	.word	0x200000a9

08000ba4 <__sinit_lock_acquire>:
 8000ba4:	4801      	ldr	r0, [pc, #4]	; (8000bac <__sinit_lock_acquire+0x8>)
 8000ba6:	f000 b8a7 	b.w	8000cf8 <__retarget_lock_acquire_recursive>
 8000baa:	bf00      	nop
 8000bac:	200000aa 	.word	0x200000aa

08000bb0 <__sinit_lock_release>:
 8000bb0:	4801      	ldr	r0, [pc, #4]	; (8000bb8 <__sinit_lock_release+0x8>)
 8000bb2:	f000 b8a2 	b.w	8000cfa <__retarget_lock_release_recursive>
 8000bb6:	bf00      	nop
 8000bb8:	200000aa 	.word	0x200000aa

08000bbc <__sinit>:
 8000bbc:	b510      	push	{r4, lr}
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	f7ff fff0 	bl	8000ba4 <__sinit_lock_acquire>
 8000bc4:	69a3      	ldr	r3, [r4, #24]
 8000bc6:	b11b      	cbz	r3, 8000bd0 <__sinit+0x14>
 8000bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bcc:	f7ff bff0 	b.w	8000bb0 <__sinit_lock_release>
 8000bd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000bd4:	6523      	str	r3, [r4, #80]	; 0x50
 8000bd6:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <__sinit+0x68>)
 8000bd8:	4a13      	ldr	r2, [pc, #76]	; (8000c28 <__sinit+0x6c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	62a2      	str	r2, [r4, #40]	; 0x28
 8000bde:	42a3      	cmp	r3, r4
 8000be0:	bf04      	itt	eq
 8000be2:	2301      	moveq	r3, #1
 8000be4:	61a3      	streq	r3, [r4, #24]
 8000be6:	4620      	mov	r0, r4
 8000be8:	f000 f820 	bl	8000c2c <__sfp>
 8000bec:	6060      	str	r0, [r4, #4]
 8000bee:	4620      	mov	r0, r4
 8000bf0:	f000 f81c 	bl	8000c2c <__sfp>
 8000bf4:	60a0      	str	r0, [r4, #8]
 8000bf6:	4620      	mov	r0, r4
 8000bf8:	f000 f818 	bl	8000c2c <__sfp>
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	60e0      	str	r0, [r4, #12]
 8000c00:	2104      	movs	r1, #4
 8000c02:	6860      	ldr	r0, [r4, #4]
 8000c04:	f7ff ff82 	bl	8000b0c <std>
 8000c08:	68a0      	ldr	r0, [r4, #8]
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2109      	movs	r1, #9
 8000c0e:	f7ff ff7d 	bl	8000b0c <std>
 8000c12:	68e0      	ldr	r0, [r4, #12]
 8000c14:	2202      	movs	r2, #2
 8000c16:	2112      	movs	r1, #18
 8000c18:	f7ff ff78 	bl	8000b0c <std>
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	61a3      	str	r3, [r4, #24]
 8000c20:	e7d2      	b.n	8000bc8 <__sinit+0xc>
 8000c22:	bf00      	nop
 8000c24:	080011f4 	.word	0x080011f4
 8000c28:	08000b55 	.word	0x08000b55

08000c2c <__sfp>:
 8000c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c2e:	4607      	mov	r7, r0
 8000c30:	f7ff ffac 	bl	8000b8c <__sfp_lock_acquire>
 8000c34:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <__sfp+0x84>)
 8000c36:	681e      	ldr	r6, [r3, #0]
 8000c38:	69b3      	ldr	r3, [r6, #24]
 8000c3a:	b913      	cbnz	r3, 8000c42 <__sfp+0x16>
 8000c3c:	4630      	mov	r0, r6
 8000c3e:	f7ff ffbd 	bl	8000bbc <__sinit>
 8000c42:	3648      	adds	r6, #72	; 0x48
 8000c44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000c48:	3b01      	subs	r3, #1
 8000c4a:	d503      	bpl.n	8000c54 <__sfp+0x28>
 8000c4c:	6833      	ldr	r3, [r6, #0]
 8000c4e:	b30b      	cbz	r3, 8000c94 <__sfp+0x68>
 8000c50:	6836      	ldr	r6, [r6, #0]
 8000c52:	e7f7      	b.n	8000c44 <__sfp+0x18>
 8000c54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000c58:	b9d5      	cbnz	r5, 8000c90 <__sfp+0x64>
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <__sfp+0x88>)
 8000c5c:	60e3      	str	r3, [r4, #12]
 8000c5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000c62:	6665      	str	r5, [r4, #100]	; 0x64
 8000c64:	f000 f847 	bl	8000cf6 <__retarget_lock_init_recursive>
 8000c68:	f7ff ff96 	bl	8000b98 <__sfp_lock_release>
 8000c6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000c70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000c74:	6025      	str	r5, [r4, #0]
 8000c76:	61a5      	str	r5, [r4, #24]
 8000c78:	2208      	movs	r2, #8
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000c80:	f7ff fd44 	bl	800070c <memset>
 8000c84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000c88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c90:	3468      	adds	r4, #104	; 0x68
 8000c92:	e7d9      	b.n	8000c48 <__sfp+0x1c>
 8000c94:	2104      	movs	r1, #4
 8000c96:	4638      	mov	r0, r7
 8000c98:	f7ff ff62 	bl	8000b60 <__sfmoreglue>
 8000c9c:	4604      	mov	r4, r0
 8000c9e:	6030      	str	r0, [r6, #0]
 8000ca0:	2800      	cmp	r0, #0
 8000ca2:	d1d5      	bne.n	8000c50 <__sfp+0x24>
 8000ca4:	f7ff ff78 	bl	8000b98 <__sfp_lock_release>
 8000ca8:	230c      	movs	r3, #12
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	e7ee      	b.n	8000c8c <__sfp+0x60>
 8000cae:	bf00      	nop
 8000cb0:	080011f4 	.word	0x080011f4
 8000cb4:	ffff0001 	.word	0xffff0001

08000cb8 <_fwalk_reent>:
 8000cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000cbc:	4606      	mov	r6, r0
 8000cbe:	4688      	mov	r8, r1
 8000cc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000cc4:	2700      	movs	r7, #0
 8000cc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000cca:	f1b9 0901 	subs.w	r9, r9, #1
 8000cce:	d505      	bpl.n	8000cdc <_fwalk_reent+0x24>
 8000cd0:	6824      	ldr	r4, [r4, #0]
 8000cd2:	2c00      	cmp	r4, #0
 8000cd4:	d1f7      	bne.n	8000cc6 <_fwalk_reent+0xe>
 8000cd6:	4638      	mov	r0, r7
 8000cd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000cdc:	89ab      	ldrh	r3, [r5, #12]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d907      	bls.n	8000cf2 <_fwalk_reent+0x3a>
 8000ce2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	d003      	beq.n	8000cf2 <_fwalk_reent+0x3a>
 8000cea:	4629      	mov	r1, r5
 8000cec:	4630      	mov	r0, r6
 8000cee:	47c0      	blx	r8
 8000cf0:	4307      	orrs	r7, r0
 8000cf2:	3568      	adds	r5, #104	; 0x68
 8000cf4:	e7e9      	b.n	8000cca <_fwalk_reent+0x12>

08000cf6 <__retarget_lock_init_recursive>:
 8000cf6:	4770      	bx	lr

08000cf8 <__retarget_lock_acquire_recursive>:
 8000cf8:	4770      	bx	lr

08000cfa <__retarget_lock_release_recursive>:
 8000cfa:	4770      	bx	lr

08000cfc <__swhatbuf_r>:
 8000cfc:	b570      	push	{r4, r5, r6, lr}
 8000cfe:	460e      	mov	r6, r1
 8000d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d04:	2900      	cmp	r1, #0
 8000d06:	b096      	sub	sp, #88	; 0x58
 8000d08:	4614      	mov	r4, r2
 8000d0a:	461d      	mov	r5, r3
 8000d0c:	da08      	bge.n	8000d20 <__swhatbuf_r+0x24>
 8000d0e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000d12:	2200      	movs	r2, #0
 8000d14:	602a      	str	r2, [r5, #0]
 8000d16:	061a      	lsls	r2, r3, #24
 8000d18:	d410      	bmi.n	8000d3c <__swhatbuf_r+0x40>
 8000d1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d1e:	e00e      	b.n	8000d3e <__swhatbuf_r+0x42>
 8000d20:	466a      	mov	r2, sp
 8000d22:	f000 f9a7 	bl	8001074 <_fstat_r>
 8000d26:	2800      	cmp	r0, #0
 8000d28:	dbf1      	blt.n	8000d0e <__swhatbuf_r+0x12>
 8000d2a:	9a01      	ldr	r2, [sp, #4]
 8000d2c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000d30:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000d34:	425a      	negs	r2, r3
 8000d36:	415a      	adcs	r2, r3
 8000d38:	602a      	str	r2, [r5, #0]
 8000d3a:	e7ee      	b.n	8000d1a <__swhatbuf_r+0x1e>
 8000d3c:	2340      	movs	r3, #64	; 0x40
 8000d3e:	2000      	movs	r0, #0
 8000d40:	6023      	str	r3, [r4, #0]
 8000d42:	b016      	add	sp, #88	; 0x58
 8000d44:	bd70      	pop	{r4, r5, r6, pc}
	...

08000d48 <__smakebuf_r>:
 8000d48:	898b      	ldrh	r3, [r1, #12]
 8000d4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000d4c:	079d      	lsls	r5, r3, #30
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460c      	mov	r4, r1
 8000d52:	d507      	bpl.n	8000d64 <__smakebuf_r+0x1c>
 8000d54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000d58:	6023      	str	r3, [r4, #0]
 8000d5a:	6123      	str	r3, [r4, #16]
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	6163      	str	r3, [r4, #20]
 8000d60:	b002      	add	sp, #8
 8000d62:	bd70      	pop	{r4, r5, r6, pc}
 8000d64:	ab01      	add	r3, sp, #4
 8000d66:	466a      	mov	r2, sp
 8000d68:	f7ff ffc8 	bl	8000cfc <__swhatbuf_r>
 8000d6c:	9900      	ldr	r1, [sp, #0]
 8000d6e:	4605      	mov	r5, r0
 8000d70:	4630      	mov	r0, r6
 8000d72:	f000 f895 	bl	8000ea0 <_malloc_r>
 8000d76:	b948      	cbnz	r0, 8000d8c <__smakebuf_r+0x44>
 8000d78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d7c:	059a      	lsls	r2, r3, #22
 8000d7e:	d4ef      	bmi.n	8000d60 <__smakebuf_r+0x18>
 8000d80:	f023 0303 	bic.w	r3, r3, #3
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	81a3      	strh	r3, [r4, #12]
 8000d8a:	e7e3      	b.n	8000d54 <__smakebuf_r+0xc>
 8000d8c:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <__smakebuf_r+0x7c>)
 8000d8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8000d90:	89a3      	ldrh	r3, [r4, #12]
 8000d92:	6020      	str	r0, [r4, #0]
 8000d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d98:	81a3      	strh	r3, [r4, #12]
 8000d9a:	9b00      	ldr	r3, [sp, #0]
 8000d9c:	6163      	str	r3, [r4, #20]
 8000d9e:	9b01      	ldr	r3, [sp, #4]
 8000da0:	6120      	str	r0, [r4, #16]
 8000da2:	b15b      	cbz	r3, 8000dbc <__smakebuf_r+0x74>
 8000da4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000da8:	4630      	mov	r0, r6
 8000daa:	f000 f975 	bl	8001098 <_isatty_r>
 8000dae:	b128      	cbz	r0, 8000dbc <__smakebuf_r+0x74>
 8000db0:	89a3      	ldrh	r3, [r4, #12]
 8000db2:	f023 0303 	bic.w	r3, r3, #3
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	81a3      	strh	r3, [r4, #12]
 8000dbc:	89a0      	ldrh	r0, [r4, #12]
 8000dbe:	4305      	orrs	r5, r0
 8000dc0:	81a5      	strh	r5, [r4, #12]
 8000dc2:	e7cd      	b.n	8000d60 <__smakebuf_r+0x18>
 8000dc4:	08000b55 	.word	0x08000b55

08000dc8 <_free_r>:
 8000dc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000dca:	2900      	cmp	r1, #0
 8000dcc:	d044      	beq.n	8000e58 <_free_r+0x90>
 8000dce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000dd2:	9001      	str	r0, [sp, #4]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f1a1 0404 	sub.w	r4, r1, #4
 8000dda:	bfb8      	it	lt
 8000ddc:	18e4      	addlt	r4, r4, r3
 8000dde:	f000 f97d 	bl	80010dc <__malloc_lock>
 8000de2:	4a1e      	ldr	r2, [pc, #120]	; (8000e5c <_free_r+0x94>)
 8000de4:	9801      	ldr	r0, [sp, #4]
 8000de6:	6813      	ldr	r3, [r2, #0]
 8000de8:	b933      	cbnz	r3, 8000df8 <_free_r+0x30>
 8000dea:	6063      	str	r3, [r4, #4]
 8000dec:	6014      	str	r4, [r2, #0]
 8000dee:	b003      	add	sp, #12
 8000df0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000df4:	f000 b978 	b.w	80010e8 <__malloc_unlock>
 8000df8:	42a3      	cmp	r3, r4
 8000dfa:	d908      	bls.n	8000e0e <_free_r+0x46>
 8000dfc:	6825      	ldr	r5, [r4, #0]
 8000dfe:	1961      	adds	r1, r4, r5
 8000e00:	428b      	cmp	r3, r1
 8000e02:	bf01      	itttt	eq
 8000e04:	6819      	ldreq	r1, [r3, #0]
 8000e06:	685b      	ldreq	r3, [r3, #4]
 8000e08:	1949      	addeq	r1, r1, r5
 8000e0a:	6021      	streq	r1, [r4, #0]
 8000e0c:	e7ed      	b.n	8000dea <_free_r+0x22>
 8000e0e:	461a      	mov	r2, r3
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	b10b      	cbz	r3, 8000e18 <_free_r+0x50>
 8000e14:	42a3      	cmp	r3, r4
 8000e16:	d9fa      	bls.n	8000e0e <_free_r+0x46>
 8000e18:	6811      	ldr	r1, [r2, #0]
 8000e1a:	1855      	adds	r5, r2, r1
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	d10b      	bne.n	8000e38 <_free_r+0x70>
 8000e20:	6824      	ldr	r4, [r4, #0]
 8000e22:	4421      	add	r1, r4
 8000e24:	1854      	adds	r4, r2, r1
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	6011      	str	r1, [r2, #0]
 8000e2a:	d1e0      	bne.n	8000dee <_free_r+0x26>
 8000e2c:	681c      	ldr	r4, [r3, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	6053      	str	r3, [r2, #4]
 8000e32:	4421      	add	r1, r4
 8000e34:	6011      	str	r1, [r2, #0]
 8000e36:	e7da      	b.n	8000dee <_free_r+0x26>
 8000e38:	d902      	bls.n	8000e40 <_free_r+0x78>
 8000e3a:	230c      	movs	r3, #12
 8000e3c:	6003      	str	r3, [r0, #0]
 8000e3e:	e7d6      	b.n	8000dee <_free_r+0x26>
 8000e40:	6825      	ldr	r5, [r4, #0]
 8000e42:	1961      	adds	r1, r4, r5
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf04      	itt	eq
 8000e48:	6819      	ldreq	r1, [r3, #0]
 8000e4a:	685b      	ldreq	r3, [r3, #4]
 8000e4c:	6063      	str	r3, [r4, #4]
 8000e4e:	bf04      	itt	eq
 8000e50:	1949      	addeq	r1, r1, r5
 8000e52:	6021      	streq	r1, [r4, #0]
 8000e54:	6054      	str	r4, [r2, #4]
 8000e56:	e7ca      	b.n	8000dee <_free_r+0x26>
 8000e58:	b003      	add	sp, #12
 8000e5a:	bd30      	pop	{r4, r5, pc}
 8000e5c:	200000ac 	.word	0x200000ac

08000e60 <sbrk_aligned>:
 8000e60:	b570      	push	{r4, r5, r6, lr}
 8000e62:	4e0e      	ldr	r6, [pc, #56]	; (8000e9c <sbrk_aligned+0x3c>)
 8000e64:	460c      	mov	r4, r1
 8000e66:	6831      	ldr	r1, [r6, #0]
 8000e68:	4605      	mov	r5, r0
 8000e6a:	b911      	cbnz	r1, 8000e72 <sbrk_aligned+0x12>
 8000e6c:	f000 f88c 	bl	8000f88 <_sbrk_r>
 8000e70:	6030      	str	r0, [r6, #0]
 8000e72:	4621      	mov	r1, r4
 8000e74:	4628      	mov	r0, r5
 8000e76:	f000 f887 	bl	8000f88 <_sbrk_r>
 8000e7a:	1c43      	adds	r3, r0, #1
 8000e7c:	d00a      	beq.n	8000e94 <sbrk_aligned+0x34>
 8000e7e:	1cc4      	adds	r4, r0, #3
 8000e80:	f024 0403 	bic.w	r4, r4, #3
 8000e84:	42a0      	cmp	r0, r4
 8000e86:	d007      	beq.n	8000e98 <sbrk_aligned+0x38>
 8000e88:	1a21      	subs	r1, r4, r0
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	f000 f87c 	bl	8000f88 <_sbrk_r>
 8000e90:	3001      	adds	r0, #1
 8000e92:	d101      	bne.n	8000e98 <sbrk_aligned+0x38>
 8000e94:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000e98:	4620      	mov	r0, r4
 8000e9a:	bd70      	pop	{r4, r5, r6, pc}
 8000e9c:	200000b0 	.word	0x200000b0

08000ea0 <_malloc_r>:
 8000ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ea4:	1ccd      	adds	r5, r1, #3
 8000ea6:	f025 0503 	bic.w	r5, r5, #3
 8000eaa:	3508      	adds	r5, #8
 8000eac:	2d0c      	cmp	r5, #12
 8000eae:	bf38      	it	cc
 8000eb0:	250c      	movcc	r5, #12
 8000eb2:	2d00      	cmp	r5, #0
 8000eb4:	4607      	mov	r7, r0
 8000eb6:	db01      	blt.n	8000ebc <_malloc_r+0x1c>
 8000eb8:	42a9      	cmp	r1, r5
 8000eba:	d905      	bls.n	8000ec8 <_malloc_r+0x28>
 8000ebc:	230c      	movs	r3, #12
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	2600      	movs	r6, #0
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ec8:	4e2e      	ldr	r6, [pc, #184]	; (8000f84 <_malloc_r+0xe4>)
 8000eca:	f000 f907 	bl	80010dc <__malloc_lock>
 8000ece:	6833      	ldr	r3, [r6, #0]
 8000ed0:	461c      	mov	r4, r3
 8000ed2:	bb34      	cbnz	r4, 8000f22 <_malloc_r+0x82>
 8000ed4:	4629      	mov	r1, r5
 8000ed6:	4638      	mov	r0, r7
 8000ed8:	f7ff ffc2 	bl	8000e60 <sbrk_aligned>
 8000edc:	1c43      	adds	r3, r0, #1
 8000ede:	4604      	mov	r4, r0
 8000ee0:	d14d      	bne.n	8000f7e <_malloc_r+0xde>
 8000ee2:	6834      	ldr	r4, [r6, #0]
 8000ee4:	4626      	mov	r6, r4
 8000ee6:	2e00      	cmp	r6, #0
 8000ee8:	d140      	bne.n	8000f6c <_malloc_r+0xcc>
 8000eea:	6823      	ldr	r3, [r4, #0]
 8000eec:	4631      	mov	r1, r6
 8000eee:	4638      	mov	r0, r7
 8000ef0:	eb04 0803 	add.w	r8, r4, r3
 8000ef4:	f000 f848 	bl	8000f88 <_sbrk_r>
 8000ef8:	4580      	cmp	r8, r0
 8000efa:	d13a      	bne.n	8000f72 <_malloc_r+0xd2>
 8000efc:	6821      	ldr	r1, [r4, #0]
 8000efe:	3503      	adds	r5, #3
 8000f00:	1a6d      	subs	r5, r5, r1
 8000f02:	f025 0503 	bic.w	r5, r5, #3
 8000f06:	3508      	adds	r5, #8
 8000f08:	2d0c      	cmp	r5, #12
 8000f0a:	bf38      	it	cc
 8000f0c:	250c      	movcc	r5, #12
 8000f0e:	4629      	mov	r1, r5
 8000f10:	4638      	mov	r0, r7
 8000f12:	f7ff ffa5 	bl	8000e60 <sbrk_aligned>
 8000f16:	3001      	adds	r0, #1
 8000f18:	d02b      	beq.n	8000f72 <_malloc_r+0xd2>
 8000f1a:	6823      	ldr	r3, [r4, #0]
 8000f1c:	442b      	add	r3, r5
 8000f1e:	6023      	str	r3, [r4, #0]
 8000f20:	e00e      	b.n	8000f40 <_malloc_r+0xa0>
 8000f22:	6822      	ldr	r2, [r4, #0]
 8000f24:	1b52      	subs	r2, r2, r5
 8000f26:	d41e      	bmi.n	8000f66 <_malloc_r+0xc6>
 8000f28:	2a0b      	cmp	r2, #11
 8000f2a:	d916      	bls.n	8000f5a <_malloc_r+0xba>
 8000f2c:	1961      	adds	r1, r4, r5
 8000f2e:	42a3      	cmp	r3, r4
 8000f30:	6025      	str	r5, [r4, #0]
 8000f32:	bf18      	it	ne
 8000f34:	6059      	strne	r1, [r3, #4]
 8000f36:	6863      	ldr	r3, [r4, #4]
 8000f38:	bf08      	it	eq
 8000f3a:	6031      	streq	r1, [r6, #0]
 8000f3c:	5162      	str	r2, [r4, r5]
 8000f3e:	604b      	str	r3, [r1, #4]
 8000f40:	4638      	mov	r0, r7
 8000f42:	f104 060b 	add.w	r6, r4, #11
 8000f46:	f000 f8cf 	bl	80010e8 <__malloc_unlock>
 8000f4a:	f026 0607 	bic.w	r6, r6, #7
 8000f4e:	1d23      	adds	r3, r4, #4
 8000f50:	1af2      	subs	r2, r6, r3
 8000f52:	d0b6      	beq.n	8000ec2 <_malloc_r+0x22>
 8000f54:	1b9b      	subs	r3, r3, r6
 8000f56:	50a3      	str	r3, [r4, r2]
 8000f58:	e7b3      	b.n	8000ec2 <_malloc_r+0x22>
 8000f5a:	6862      	ldr	r2, [r4, #4]
 8000f5c:	42a3      	cmp	r3, r4
 8000f5e:	bf0c      	ite	eq
 8000f60:	6032      	streq	r2, [r6, #0]
 8000f62:	605a      	strne	r2, [r3, #4]
 8000f64:	e7ec      	b.n	8000f40 <_malloc_r+0xa0>
 8000f66:	4623      	mov	r3, r4
 8000f68:	6864      	ldr	r4, [r4, #4]
 8000f6a:	e7b2      	b.n	8000ed2 <_malloc_r+0x32>
 8000f6c:	4634      	mov	r4, r6
 8000f6e:	6876      	ldr	r6, [r6, #4]
 8000f70:	e7b9      	b.n	8000ee6 <_malloc_r+0x46>
 8000f72:	230c      	movs	r3, #12
 8000f74:	603b      	str	r3, [r7, #0]
 8000f76:	4638      	mov	r0, r7
 8000f78:	f000 f8b6 	bl	80010e8 <__malloc_unlock>
 8000f7c:	e7a1      	b.n	8000ec2 <_malloc_r+0x22>
 8000f7e:	6025      	str	r5, [r4, #0]
 8000f80:	e7de      	b.n	8000f40 <_malloc_r+0xa0>
 8000f82:	bf00      	nop
 8000f84:	200000ac 	.word	0x200000ac

08000f88 <_sbrk_r>:
 8000f88:	b538      	push	{r3, r4, r5, lr}
 8000f8a:	4d06      	ldr	r5, [pc, #24]	; (8000fa4 <_sbrk_r+0x1c>)
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	4604      	mov	r4, r0
 8000f90:	4608      	mov	r0, r1
 8000f92:	602b      	str	r3, [r5, #0]
 8000f94:	f7ff fb30 	bl	80005f8 <_sbrk>
 8000f98:	1c43      	adds	r3, r0, #1
 8000f9a:	d102      	bne.n	8000fa2 <_sbrk_r+0x1a>
 8000f9c:	682b      	ldr	r3, [r5, #0]
 8000f9e:	b103      	cbz	r3, 8000fa2 <_sbrk_r+0x1a>
 8000fa0:	6023      	str	r3, [r4, #0]
 8000fa2:	bd38      	pop	{r3, r4, r5, pc}
 8000fa4:	200000b4 	.word	0x200000b4

08000fa8 <__sread>:
 8000fa8:	b510      	push	{r4, lr}
 8000faa:	460c      	mov	r4, r1
 8000fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fb0:	f000 f8a0 	bl	80010f4 <_read_r>
 8000fb4:	2800      	cmp	r0, #0
 8000fb6:	bfab      	itete	ge
 8000fb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000fba:	89a3      	ldrhlt	r3, [r4, #12]
 8000fbc:	181b      	addge	r3, r3, r0
 8000fbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000fc2:	bfac      	ite	ge
 8000fc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8000fc6:	81a3      	strhlt	r3, [r4, #12]
 8000fc8:	bd10      	pop	{r4, pc}

08000fca <__swrite>:
 8000fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fce:	461f      	mov	r7, r3
 8000fd0:	898b      	ldrh	r3, [r1, #12]
 8000fd2:	05db      	lsls	r3, r3, #23
 8000fd4:	4605      	mov	r5, r0
 8000fd6:	460c      	mov	r4, r1
 8000fd8:	4616      	mov	r6, r2
 8000fda:	d505      	bpl.n	8000fe8 <__swrite+0x1e>
 8000fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f000 f868 	bl	80010b8 <_lseek_r>
 8000fe8:	89a3      	ldrh	r3, [r4, #12]
 8000fea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000fee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ff2:	81a3      	strh	r3, [r4, #12]
 8000ff4:	4632      	mov	r2, r6
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000ffe:	f000 b817 	b.w	8001030 <_write_r>

08001002 <__sseek>:
 8001002:	b510      	push	{r4, lr}
 8001004:	460c      	mov	r4, r1
 8001006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800100a:	f000 f855 	bl	80010b8 <_lseek_r>
 800100e:	1c43      	adds	r3, r0, #1
 8001010:	89a3      	ldrh	r3, [r4, #12]
 8001012:	bf15      	itete	ne
 8001014:	6560      	strne	r0, [r4, #84]	; 0x54
 8001016:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800101a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800101e:	81a3      	strheq	r3, [r4, #12]
 8001020:	bf18      	it	ne
 8001022:	81a3      	strhne	r3, [r4, #12]
 8001024:	bd10      	pop	{r4, pc}

08001026 <__sclose>:
 8001026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800102a:	f000 b813 	b.w	8001054 <_close_r>
	...

08001030 <_write_r>:
 8001030:	b538      	push	{r3, r4, r5, lr}
 8001032:	4d07      	ldr	r5, [pc, #28]	; (8001050 <_write_r+0x20>)
 8001034:	4604      	mov	r4, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4611      	mov	r1, r2
 800103a:	2200      	movs	r2, #0
 800103c:	602a      	str	r2, [r5, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	f7ff fa89 	bl	8000556 <_write>
 8001044:	1c43      	adds	r3, r0, #1
 8001046:	d102      	bne.n	800104e <_write_r+0x1e>
 8001048:	682b      	ldr	r3, [r5, #0]
 800104a:	b103      	cbz	r3, 800104e <_write_r+0x1e>
 800104c:	6023      	str	r3, [r4, #0]
 800104e:	bd38      	pop	{r3, r4, r5, pc}
 8001050:	200000b4 	.word	0x200000b4

08001054 <_close_r>:
 8001054:	b538      	push	{r3, r4, r5, lr}
 8001056:	4d06      	ldr	r5, [pc, #24]	; (8001070 <_close_r+0x1c>)
 8001058:	2300      	movs	r3, #0
 800105a:	4604      	mov	r4, r0
 800105c:	4608      	mov	r0, r1
 800105e:	602b      	str	r3, [r5, #0]
 8001060:	f7ff fa95 	bl	800058e <_close>
 8001064:	1c43      	adds	r3, r0, #1
 8001066:	d102      	bne.n	800106e <_close_r+0x1a>
 8001068:	682b      	ldr	r3, [r5, #0]
 800106a:	b103      	cbz	r3, 800106e <_close_r+0x1a>
 800106c:	6023      	str	r3, [r4, #0]
 800106e:	bd38      	pop	{r3, r4, r5, pc}
 8001070:	200000b4 	.word	0x200000b4

08001074 <_fstat_r>:
 8001074:	b538      	push	{r3, r4, r5, lr}
 8001076:	4d07      	ldr	r5, [pc, #28]	; (8001094 <_fstat_r+0x20>)
 8001078:	2300      	movs	r3, #0
 800107a:	4604      	mov	r4, r0
 800107c:	4608      	mov	r0, r1
 800107e:	4611      	mov	r1, r2
 8001080:	602b      	str	r3, [r5, #0]
 8001082:	f7ff fa90 	bl	80005a6 <_fstat>
 8001086:	1c43      	adds	r3, r0, #1
 8001088:	d102      	bne.n	8001090 <_fstat_r+0x1c>
 800108a:	682b      	ldr	r3, [r5, #0]
 800108c:	b103      	cbz	r3, 8001090 <_fstat_r+0x1c>
 800108e:	6023      	str	r3, [r4, #0]
 8001090:	bd38      	pop	{r3, r4, r5, pc}
 8001092:	bf00      	nop
 8001094:	200000b4 	.word	0x200000b4

08001098 <_isatty_r>:
 8001098:	b538      	push	{r3, r4, r5, lr}
 800109a:	4d06      	ldr	r5, [pc, #24]	; (80010b4 <_isatty_r+0x1c>)
 800109c:	2300      	movs	r3, #0
 800109e:	4604      	mov	r4, r0
 80010a0:	4608      	mov	r0, r1
 80010a2:	602b      	str	r3, [r5, #0]
 80010a4:	f7ff fa8f 	bl	80005c6 <_isatty>
 80010a8:	1c43      	adds	r3, r0, #1
 80010aa:	d102      	bne.n	80010b2 <_isatty_r+0x1a>
 80010ac:	682b      	ldr	r3, [r5, #0]
 80010ae:	b103      	cbz	r3, 80010b2 <_isatty_r+0x1a>
 80010b0:	6023      	str	r3, [r4, #0]
 80010b2:	bd38      	pop	{r3, r4, r5, pc}
 80010b4:	200000b4 	.word	0x200000b4

080010b8 <_lseek_r>:
 80010b8:	b538      	push	{r3, r4, r5, lr}
 80010ba:	4d07      	ldr	r5, [pc, #28]	; (80010d8 <_lseek_r+0x20>)
 80010bc:	4604      	mov	r4, r0
 80010be:	4608      	mov	r0, r1
 80010c0:	4611      	mov	r1, r2
 80010c2:	2200      	movs	r2, #0
 80010c4:	602a      	str	r2, [r5, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	f7ff fa88 	bl	80005dc <_lseek>
 80010cc:	1c43      	adds	r3, r0, #1
 80010ce:	d102      	bne.n	80010d6 <_lseek_r+0x1e>
 80010d0:	682b      	ldr	r3, [r5, #0]
 80010d2:	b103      	cbz	r3, 80010d6 <_lseek_r+0x1e>
 80010d4:	6023      	str	r3, [r4, #0]
 80010d6:	bd38      	pop	{r3, r4, r5, pc}
 80010d8:	200000b4 	.word	0x200000b4

080010dc <__malloc_lock>:
 80010dc:	4801      	ldr	r0, [pc, #4]	; (80010e4 <__malloc_lock+0x8>)
 80010de:	f7ff be0b 	b.w	8000cf8 <__retarget_lock_acquire_recursive>
 80010e2:	bf00      	nop
 80010e4:	200000a8 	.word	0x200000a8

080010e8 <__malloc_unlock>:
 80010e8:	4801      	ldr	r0, [pc, #4]	; (80010f0 <__malloc_unlock+0x8>)
 80010ea:	f7ff be06 	b.w	8000cfa <__retarget_lock_release_recursive>
 80010ee:	bf00      	nop
 80010f0:	200000a8 	.word	0x200000a8

080010f4 <_read_r>:
 80010f4:	b538      	push	{r3, r4, r5, lr}
 80010f6:	4d07      	ldr	r5, [pc, #28]	; (8001114 <_read_r+0x20>)
 80010f8:	4604      	mov	r4, r0
 80010fa:	4608      	mov	r0, r1
 80010fc:	4611      	mov	r1, r2
 80010fe:	2200      	movs	r2, #0
 8001100:	602a      	str	r2, [r5, #0]
 8001102:	461a      	mov	r2, r3
 8001104:	f7ff fa0a 	bl	800051c <_read>
 8001108:	1c43      	adds	r3, r0, #1
 800110a:	d102      	bne.n	8001112 <_read_r+0x1e>
 800110c:	682b      	ldr	r3, [r5, #0]
 800110e:	b103      	cbz	r3, 8001112 <_read_r+0x1e>
 8001110:	6023      	str	r3, [r4, #0]
 8001112:	bd38      	pop	{r3, r4, r5, pc}
 8001114:	200000b4 	.word	0x200000b4

08001118 <_init>:
 8001118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111a:	bf00      	nop
 800111c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800111e:	bc08      	pop	{r3}
 8001120:	469e      	mov	lr, r3
 8001122:	4770      	bx	lr

08001124 <_fini>:
 8001124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001126:	bf00      	nop
 8001128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800112a:	bc08      	pop	{r3}
 800112c:	469e      	mov	lr, r3
 800112e:	4770      	bx	lr
